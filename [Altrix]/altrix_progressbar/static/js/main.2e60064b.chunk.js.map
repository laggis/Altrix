{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["emitClientEvent","event","data","options","method","body","JSON","stringify","console","log","fetch","interval","App","state","width","message","opacity","color","startAction","_ref","text","delay","_ref$color","eventData","clearInterval","_this","setState","split","increaseWidth","setInterval","prevState","handleMessage","_message$data","action","window","addEventListener","this","removeEventListener","_this$state","react_default","a","createElement","className","style","background","concat","key","React","PureComponent","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGMA,SAAkB,SAACC,EAAOC,GAC9B,IAAMC,EAAU,CACdC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEN,QAAOC,UAEhCM,QAAQC,IAAI,6BACZD,QAAQC,IAAIH,KAAKC,UAAU,CAAEN,QAAOC,UACpCQ,MAAM,qCAAsCP,KAG1CQ,EAAW,KA4EAC,6MA1EbC,MAAQ,CACNC,MAAO,KACPC,QAAS,KACTC,QAAS,EACTC,MAAO,QAGTC,YAAc,SAAAC,GAAqD,IAAlDC,EAAkDD,EAAlDC,KAAMC,EAA4CF,EAA5CE,MAA4CC,EAAAH,EAArCF,aAAqC,IAAAK,EAA7B,KAA6BA,EAAvBrB,EAAuBkB,EAAvBlB,MAAOsB,EAAgBJ,EAAhBI,UAEjDC,cAAcb,GACdc,EAAKC,SAAS,CACZX,QAASK,EACTN,MAAO,EACPE,QAAS,EACTC,MAAOA,IAIT,IAAIU,EAAQ,GACRC,EAAgB,EAChBP,GAAS,KACXM,EAAQ,IACRC,EAAgB,GACPP,GAAS,MAClBM,EAAQ,IACRC,EAAgB,IAGdP,IACFV,EAAWkB,YAAY,WACjBJ,EAAKZ,MAAMC,OAAS,KACtBU,cAAcb,GACdc,EAAKC,SAAS,CAAEZ,MAAO,KAAME,QAAS,EAAGC,MAAO,OAE5ChB,GACFD,EAAgBC,EAAOsB,IAGzBE,EAAKC,SAAS,SAAAI,GAAS,MAAK,CAC1BhB,MAAOgB,EAAUhB,MAAQc,MAG5BP,EAAQM,OAIfI,cAAgB,SAAAhB,GAAW,IAAAiB,EACgCjB,EAAQb,KAAzD+B,EADiBD,EACjBC,OAAQb,EADSY,EACTZ,KAAMC,EADGW,EACHX,MAAOJ,EADJe,EACIf,MAAOhB,EADX+B,EACW/B,MAAOsB,EADlBS,EACkBT,UAE5B,0BAAXU,GAAsCb,GAAQC,GAChDI,EAAKP,YAAY,CAAEE,OAAMC,QAAOJ,QAAOhB,QAAOsB,kGAMhDW,OAAOC,iBAAiB,UAAWC,KAAKL,8DAIxCG,OAAOG,oBAAoB,UAAWD,KAAKL,gDAGpC,IAAAO,EACoCF,KAAKvB,MAAxCC,EADDwB,EACCxB,MAAOC,EADRuB,EACQvB,QAASC,EADjBsB,EACiBtB,QAASC,EAD1BqB,EAC0BrB,MACjC,OACEsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAO,CAAE3B,QAASA,EAAS4B,WAAY3B,IAC1DsB,EAAAC,EAAAC,cAAA,UAAK1B,GACLwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,MAAO,CAAE7B,MAAK,GAAA+B,OAAK/B,EAAL,MAAiBgC,IAAKnC,YArEhDoC,IAAMC,eCFJC,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2e60064b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst emitClientEvent = (event, data) => {\n  const options = {\n    method: 'POST',\n    body: JSON.stringify({ event, data })\n  };\n  console.log('Sending event to client: ');\n  console.log(JSON.stringify({ event, data }));\n  fetch('http://nuipipe/nui_client_response', options);\n};\n\nlet interval = null;\nclass App extends React.PureComponent {\n  state = {\n    width: null,\n    message: null,\n    opacity: 0,\n    color: null\n  };\n\n  startAction = ({ text, delay, color = null, event, eventData }) => {\n    /* Clear everything */\n    clearInterval(interval);\n    this.setState({\n      message: text,\n      width: 0,\n      opacity: 1,\n      color: color\n    });\n\n    /* Smoothness */\n    let split = 50;\n    let increaseWidth = 2;\n    if (delay >= 5000) {\n      split = 100;\n      increaseWidth = 1;\n    } else if (delay >= 20000) {\n      split = 200;\n      increaseWidth = 0.5;\n    }\n\n    if (delay) {\n      interval = setInterval(() => {\n        if (this.state.width >= 100) {\n          clearInterval(interval);\n          this.setState({ width: null, opacity: 0, color: null });\n\n          if (event) {\n            emitClientEvent(event, eventData);\n          }\n        } else {\n          this.setState(prevState => ({\n            width: prevState.width + increaseWidth\n          }));\n        }\n      }, delay / split);\n    }\n  };\n\n  handleMessage = message => {\n    const { action, text, delay, color, event, eventData } = message.data;\n    \n    if (action === 'SHOW_DELAYED_FUNCTION' && text && delay) {\n      this.startAction({ text, delay, color, event, eventData });\n    }\n\n  };\n\n  componentDidMount() {\n    window.addEventListener('message', this.handleMessage);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('message', this.handleMessage);\n  }\n\n  render() {\n    const { width, message, opacity, color } = this.state;\n    return (\n      <div className=\"App\" style={{ opacity: opacity, background: color }}>\n        <h2>{message}</h2>\n        <div className=\"fill\" style={{ width: `${width}%` }} key={interval} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}